# Generated by Selenium IDE
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import pyaudio
import wave
import sys


class chat():
    questionAnswerDict = {
        "Please enter your First Name.": "John",
        "Please enter your Last Name.": "Doe",
        "Do you have a claim for unemployment bennefits currently filed with Virginia": "Yes",
        "Would you like to view your claim summary": "No",
        "Please enter your Social Security Number": "555555555",
        "John , please confirm that 555555555 , please confirm that": "Yes",
        "Thank you, Please enter the first four digits of your six digit Personal Identification Number.": "5555",
        "Enter you street address now.": "5555 Some Place",
        "Enter your city now": "Some Place",
        "Enter your state": "Texas",
        "Enter your zip code now": "12345",
        "Enter your phone number now.": "5555555555",
        "Are you performing any work including selfemployment": "Yes",
        "Please wait for the next available Customer Service Representative.": "Win",
        "Chat(s) in front of you.": "ScrapeNumberHere",
        "Thank you for your patience.": "CheckBefore",
        "At this time your session will be disconnected": "Restart",
        "Your question is very important to us, we apologize for the wait.": "Waiting"
    }

    keyQuestions = questionAnswerDict.keys()

    answeredQuestions = []

    def __init__(self):
        self.setup_method()
        self.teardown_method()

    def setup_method(self):
        chrome_options = webdriver.ChromeOptions()
        chrome_options.add_argument("--mute-audio")
        self.driver = webdriver.Chrome("chromedriver.exe", options=chrome_options)
        self.test_chatTest()

    def teardown_method(self):
        self.driver.quit()

    def answerQuestions(self):
        while True:
            try:
                messages = self.driver.find_elements_by_css_selector(".customer-paragraph")
                latestMessage = messages[-1].text
            except:
                break
            test = self.matcher(latestMessage)
            if test == "Fail":
                break

    def matcher(self, latestMessage):
        for s in self.keyQuestions:
            if s in latestMessage:
                response = self.questionAnswerDict[s]
                if response == "Win":
                    self.playVictory()
                if response == "Restart":
                    return "Fail"
                else:
                    hasItBeenAnswered = self.checkIfAnswered(s)
                    if not hasItBeenAnswered:
                        self.driver.find_element(By.ID, "textType").send_keys(response)
                        self.driver.find_element(By.ID, "spanSendMessage").click()

        return "continue"

    def checkIfAnswered(self, question):
        if len(self.answeredQuestions) == 0:
            self.answeredQuestions.append(question)
        else:
            if question in self.answeredQuestions:
                return True
            else:
                self.answeredQuestions.append(question)

        return False

    def refresh(self):
        try:
            element_present = expected_conditions.presence_of_element_located(
                (By.CSS_SELECTOR, ".thankyou-title-text"))
            WebDriverWait(self.driver, 100).until(element_present)
        except TimeoutError:
            print("Page timed out.")
        finally:
            self.answeredQuestions.clear()
            self.driver.refresh()
            return ""

    def playVictory(self):
        CHUNK = 1024
        wf = wave.open("LOZ_Fanfare.wav", 'rb')

        p = pyaudio.PyAudio()

        # Open stream.
        stream = p.open(format=p.get_format_from_width(wf.getsampwidth()),
                        channels=wf.getnchannels(),
                        rate=wf.getframerate(),
                        output=True)

        data = wf.readframes(CHUNK)
        while len(data) > 0:
            stream.write(data)
            data = wf.readframes(CHUNK)

        # Stop stream.
        stream.stop_stream()
        stream.close()

        # Close PyAudio.
        p.terminate()

    def test_chatTest(self):
        self.driver.get(
            "https://home-c19.incontact.com/incontact/chatclient/chatclient.aspx?poc=df1cb383-8ed6-4d1e-87c7"
            "-7e8c9bfec090&bu=4596141")
        self.driver.maximize_window()
        while True:
            try:
                element_present = expected_conditions.presence_of_element_located(
                    (By.CSS_SELECTOR, ".customer-paragraph > span"))
                WebDriverWait(self.driver, 100).until(element_present)
            except TimeoutError:
                print("Page timed out.")
            finally:
                self.driver.find_element(By.ID, "textType").send_keys("English")
                self.driver.find_element(By.ID, "spanSendMessage").click()
                self.answerQuestions()

                self.refresh()


chat()
